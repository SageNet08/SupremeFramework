// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SupremeFramework.Features.UI
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Order")]
    public partial class OrderFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Order.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/UI", "Order", "In this feature file, orders will be placed;", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 11
#line hidden
#line 12
 testRunner.Given("the user is on the homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When("the user click the Login link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("the user is on the Login Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order a Product")]
        [NUnit.Framework.CategoryAttribute("Edge")]
        public virtual void OrderAProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "Edge"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order a Product", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "password"});
                table18.AddRow(new string[] {
                            "demouser@microsoft.com",
                            "Pass@word1"});
#line 28
    testRunner.When("the user enters the credentials and click the login button", ((string)(null)), table18, "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "brand",
                            "type"});
                table19.AddRow(new string[] {
                            "Other",
                            "All"});
#line 31
 testRunner.When("the user selects the brand and the type filters of the products", ((string)(null)), table19, "When ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "items"});
                table20.AddRow(new string[] {
                            "Prism White T-Shirt"});
#line 34
 testRunner.And("the user adds an item to basket", ((string)(null)), table20, "And ");
#line hidden
#line 37
 testRunner.And("the Basket page appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "quantity"});
                table21.AddRow(new string[] {
                            "5"});
#line 38
 testRunner.When("the user checks out with the required quantity", ((string)(null)), table21, "When ");
#line hidden
#line 41
 testRunner.And("the user completes payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "username"});
                table22.AddRow(new string[] {
                            "demouser@microsoft.com"});
#line 42
 testRunner.When("the user access his orders", ((string)(null)), table22, "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "items",
                            "quantity"});
                table23.AddRow(new string[] {
                            "Prism White T-Shirt",
                            "5"});
#line 46
 testRunner.Then("the MyOrder History is verified", ((string)(null)), table23, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid Quantity")]
        [NUnit.Framework.CategoryAttribute("Edge")]
        public virtual void InvalidQuantity()
        {
            string[] tagsOfScenario = new string[] {
                    "Edge"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Quantity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "password"});
                table24.AddRow(new string[] {
                            "demouser@microsoft.com",
                            "Pass@word1"});
#line 55
  testRunner.When("the user enters the credentials and click the login button", ((string)(null)), table24, "When ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "brand",
                            "type"});
                table25.AddRow(new string[] {
                            "Other",
                            "All"});
#line 58
 testRunner.When("the user selects the brand and the type filters of the products", ((string)(null)), table25, "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "items"});
                table26.AddRow(new string[] {
                            "Prism White T-Shirt"});
#line 61
 testRunner.And("the user adds an item to basket", ((string)(null)), table26, "And ");
#line hidden
#line 64
 testRunner.When("the Basket page appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "quantity"});
                table27.AddRow(new string[] {
                            "-1"});
#line 65
 testRunner.And("the user tries to check out with an invalid quantity", ((string)(null)), table27, "And ");
#line hidden
#line 68
 testRunner.Then("user gets an error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User orders 5 items")]
        [NUnit.Framework.CategoryAttribute("Edge")]
        public virtual void UserOrders5Items()
        {
            string[] tagsOfScenario = new string[] {
                    "Edge"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User orders 5 items", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "password"});
                table28.AddRow(new string[] {
                            "demouser@microsoft.com",
                            "Pass@word1"});
#line 74
  testRunner.When("the user enters the credentials and click the login button", ((string)(null)), table28, "When ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "brand",
                            "type"});
                table29.AddRow(new string[] {
                            "Other",
                            "All"});
#line 77
 testRunner.When("the user selects the brand and the type filters of the products", ((string)(null)), table29, "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "items",
                            "brand",
                            "type",
                            "quantity"});
                table30.AddRow(new string[] {
                            "Prism White T-Shirt",
                            "Other",
                            "All",
                            "1"});
                table30.AddRow(new string[] {
                            "Roslyn Red Sheet",
                            "Other",
                            "All",
                            "2"});
                table30.AddRow(new string[] {
                            "Roslyn Red T-Shirt",
                            "Other",
                            "All",
                            "3"});
                table30.AddRow(new string[] {
                            "Kudu Purple Sweatshirt",
                            "Other",
                            "All",
                            "4"});
                table30.AddRow(new string[] {
                            "Prism White TShirt",
                            "Other",
                            "All",
                            "5"});
#line 80
 testRunner.And("the user adds 5 items to basket", ((string)(null)), table30, "And ");
#line hidden
#line 87
 testRunner.And("the Basket page appears", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.When("the user checks out the five items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.And("the user completes payment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "username"});
                table31.AddRow(new string[] {
                            "demouser@microsoft.com"});
#line 90
 testRunner.When("the user access his orders", ((string)(null)), table31, "When ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "items",
                            "quantity"});
                table32.AddRow(new string[] {
                            "Prism White T-Shirt",
                            "1"});
                table32.AddRow(new string[] {
                            "Roslyn Red Sheet",
                            "2"});
                table32.AddRow(new string[] {
                            "Roslyn Red T-Shirt",
                            "3"});
                table32.AddRow(new string[] {
                            "Kudu Purple Sweatshirt",
                            "4"});
                table32.AddRow(new string[] {
                            "Prism White TShirt",
                            "5"});
#line 93
 testRunner.Then("the MyOrder History is verified", ((string)(null)), table32, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
